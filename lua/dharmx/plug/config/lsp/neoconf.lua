local ok, neoconf = pcall(require, "neoconf")
if not ok then return end

neoconf.setup({
  local_settings = ".neoconf.json",
  global_settings = "neoconf.json",
  import = {
    vscode = true,
    coc = true,
    nlsp = true,
  },
  live_reload = true,
  filetype_jsonc = true,
  plugins = {
    lspconfig = {
      enabled = true,
    },
    jsonls = {
      json = {
        enable = true,
        format = {
          enable = true,
        },
        maxItemsComputed = 10000,
        schemaDownload = {
          enable = true,
        },
        trace = {
          server = "messages",
        },
      },
    },
    pyright = {
      exclude = { "**/node_modules", "**/__pycache__", "src/experimental", "src/typestubs" },
      executionEnvironments = {
        {
          extraPaths = { "src/service_libs" },
          pythonPlatform = "Windows",
          pythonVersion = "3.5",
          root = "src/web",
        },
        {
          extraPaths = { "src/backend" },
          pythonVersion = "3.0",
          root = "src/sdk",
        },
        {
          extraPaths = { "src/tests/e2e", "src/sdk" },
          root = "src/tests",
        },
        {
          root = "src",
        },
      },
      ignore = { "src/oldstuff" },
      include = { "src", ".venv" },
      python = {
        analysis = {
          typeCheckingMode = "off",
        },
      },
      pythonPlatform = "Linux",
      pythonVersion = "3.10.2",
      reportMissingImports = true,
      reportMissingTypeStubs = false,
      stubPath = "src/stubs",
      venv = "env367",
    },
    rust_analyzer = {
      ["rust-analyzer"] = {
        assist = {
          importGranularity = "module",
          importPrefix = "self",
        },
        cargo = {
          loadOutDirsFromCheck = true,
        },
        procMacro = {
          enable = true,
        },
        server = {
          extraEnv = "stable",
        },
        updates = {
          askBeforeDownload = false,
        },
      },
    },
    stylelint_lsp = {
      overrides = {
        {
          customSyntax = "postcss-scss",
          files = { "*.scss", "**/*.scss" },
        },
        {
          files = { "components/**/*.css", "pages/**/*.css" },
        },
      },
      rules = {
        ["alpha-value-notation"] = { "percentage", {
          exceptProperties = { "opacity" },
        } },
        ["at-rule-empty-line-before"] = {
          "always",
          {
            except = { "blockless-after-same-name-blockless", "first-nested" },
            ignore = { "after-comment" },
          },
        },
        ["at-rule-name-case"] = "lower",
        ["at-rule-name-space-after"] = "always-single-line",
        ["at-rule-no-unknown"] = true,
        ["at-rule-no-vendor-prefix"] = true,
        ["at-rule-semicolon-newline-after"] = "always",
        ["block-closing-brace-empty-line-before"] = "never",
        ["block-closing-brace-newline-after"] = "always",
        ["block-closing-brace-newline-before"] = "always-multi-line",
        ["block-closing-brace-space-before"] = "always-single-line",
        ["block-no-empty"] = true,
        ["block-opening-brace-newline-after"] = "always-multi-line",
        ["block-opening-brace-space-after"] = "always-single-line",
        ["block-opening-brace-space-before"] = "always",
        ["color-function-notation"] = "modern",
        ["color-hex-case"] = "lower",
        ["color-hex-length"] = "short",
        ["color-no-invalid-hex"] = true,
        ["comment-empty-line-before"] = {
          "always",
          {
            except = { "first-nested" },
            ignore = { "stylelint-commands" },
          },
        },
        ["comment-no-empty"] = true,
        ["comment-whitespace-inside"] = "always",
        ["custom-media-pattern"] = {
          "^([a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message = "Expected custom media query name to be kebab-case",
          },
        },
        ["custom-property-empty-line-before"] = {
          "always",
          {
            except = { "after-custom-property", "first-nested" },
            ignore = { "after-comment", "inside-single-line-block" },
          },
        },
        ["custom-property-no-missing-var-function"] = true,
        ["custom-property-pattern"] = {
          "^([a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message = "Expected custom property name to be kebab-case",
          },
        },
        ["declaration-bang-space-after"] = "never",
        ["declaration-bang-space-before"] = "always",
        ["declaration-block-no-duplicate-custom-properties"] = true,
        ["declaration-block-no-duplicate-properties"] = {
          true,
          {
            ignore = { "consecutive-duplicates-with-different-values" },
          },
        },
        ["declaration-block-no-redundant-longhand-properties"] = true,
        ["declaration-block-no-shorthand-property-overrides"] = true,
        ["declaration-block-semicolon-newline-after"] = "always-multi-line",
        ["declaration-block-semicolon-space-after"] = "always-single-line",
        ["declaration-block-semicolon-space-before"] = "never",
        ["declaration-block-single-line-max-declarations"] = 1,
        ["declaration-block-trailing-semicolon"] = "always",
        ["declaration-colon-newline-after"] = "always-multi-line",
        ["declaration-colon-space-after"] = "always-single-line",
        ["declaration-colon-space-before"] = "never",
        ["declaration-empty-line-before"] = {
          "always",
          {
            except = { "after-declaration", "first-nested" },
            ignore = { "after-comment", "inside-single-line-block" },
          },
        },
        ["font-family-name-quotes"] = "always-where-recommended",
        ["font-family-no-duplicate-names"] = true,
        ["font-family-no-missing-generic-family-keyword"] = true,
        ["function-calc-no-unspaced-operator"] = true,
        ["function-comma-newline-after"] = "always-multi-line",
        ["function-comma-space-after"] = "always-single-line",
        ["function-comma-space-before"] = "never",
        ["function-linear-gradient-no-nonstandard-direction"] = true,
        ["function-max-empty-lines"] = 0,
        ["function-name-case"] = "lower",
        ["function-no-unknown"] = true,
        ["function-parentheses-newline-inside"] = "always-multi-line",
        ["function-parentheses-space-inside"] = "never-single-line",
        ["function-url-quotes"] = "always",
        ["function-whitespace-after"] = "always",
        ["hue-degree-notation"] = "angle",
        indentation = 2,
        ["keyframe-declaration-no-important"] = true,
        ["keyframes-name-pattern"] = {
          "^([a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message = "Expected keyframe name to be kebab-case",
          },
        },
        ["length-zero-no-unit"] = true,
        ["max-empty-lines"] = 1,
        ["max-line-length"] = 120,
        ["media-feature-colon-space-after"] = "always",
        ["media-feature-colon-space-before"] = "never",
        ["media-feature-name-case"] = "lower",
        ["media-feature-name-no-unknown"] = true,
        ["media-feature-name-no-vendor-prefix"] = true,
        ["media-feature-parentheses-space-inside"] = "never",
        ["media-feature-range-operator-space-after"] = "always",
        ["media-feature-range-operator-space-before"] = "always",
        ["media-query-list-comma-newline-after"] = "always-multi-line",
        ["media-query-list-comma-space-after"] = "always-single-line",
        ["media-query-list-comma-space-before"] = "never",
        ["named-grid-areas-no-invalid"] = true,
        ["no-descending-specificity"] = true,
        ["no-duplicate-at-import-rules"] = true,
        ["no-duplicate-selectors"] = true,
        ["no-empty-first-line"] = true,
        ["no-empty-source"] = true,
        ["no-eol-whitespace"] = true,
        ["no-extra-semicolons"] = true,
        ["no-invalid-double-slash-comments"] = true,
        ["no-invalid-position-at-import-rule"] = true,
        ["no-irregular-whitespace"] = true,
        ["no-missing-end-of-source-newline"] = true,
        ["number-leading-zero"] = "always",
        ["number-max-precision"] = 4,
        ["number-no-trailing-zeros"] = true,
        ["property-case"] = "lower",
        ["property-no-unknown"] = true,
        ["property-no-vendor-prefix"] = true,
        ["rule-empty-line-before"] = {
          "always-multi-line",
          {
            except = { "first-nested" },
            ignore = { "after-comment" },
          },
        },
        ["selector-attribute-brackets-space-inside"] = "never",
        ["selector-attribute-operator-space-after"] = "never",
        ["selector-attribute-operator-space-before"] = "never",
        ["selector-attribute-quotes"] = "always",
        ["selector-class-pattern"] = {
          "^([a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message = "Expected class selector to be kebab-case",
          },
        },
        ["selector-combinator-space-after"] = "always",
        ["selector-combinator-space-before"] = "always",
        ["selector-descendant-combinator-no-non-space"] = true,
        ["selector-id-pattern"] = {
          "^([a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message = "Expected id selector to be kebab-case",
          },
        },
        ["selector-list-comma-newline-after"] = "always",
        ["selector-list-comma-space-before"] = "never",
        ["selector-max-empty-lines"] = 0,
        ["selector-no-vendor-prefix"] = true,
        ["selector-pseudo-class-case"] = "lower",
        ["selector-pseudo-class-no-unknown"] = true,
        ["selector-pseudo-class-parentheses-space-inside"] = "never",
        ["selector-pseudo-element-case"] = "lower",
        ["selector-pseudo-element-colon-notation"] = "double",
        ["selector-pseudo-element-no-unknown"] = true,
        ["selector-type-case"] = "lower",
        ["selector-type-no-unknown"] = { true, {
          ignore = { "custom-elements" },
        } },
        ["shorthand-property-no-redundant-values"] = true,
        ["string-no-newline"] = true,
        ["string-quotes"] = "double",
        ["unit-case"] = "lower",
        ["unit-no-unknown"] = true,
        ["value-keyword-case"] = "lower",
        ["value-list-comma-newline-after"] = "always-multi-line",
        ["value-list-comma-space-after"] = "always-single-line",
        ["value-list-comma-space-before"] = "never",
        ["value-list-max-empty-lines"] = 0,
        ["value-no-vendor-prefix"] = true,
      },
    },
    sumneko_lua = {
      Lua = {
        IntelliSense = {
          traceBeSetted = true,
          traceFieldInject = true,
          traceLocalSet = true,
        },
        completion = {
          autoRequire = true,
          callSnippet = "Both",
          displayContext = 1,
          enable = true,
          keywordSnippet = "Both",
          postfix = "@",
          requireSeparator = ".",
          showParams = true,
          showWord = "Enable",
          workspaceWord = true,
        },
        diagnostics = {
          disable = {
            "lowercase-global",
            "undefined-global",
            "unused-local",
            "unused-function",
            "unused-vararg",
            "trailing-space",
          },
          enable = true,
          globals = { "vim" },
          ignoredFiles = "Opened",
          libraryFiles = "Opened",
          workspaceDelay = 300,
          workspaceRate = 100,
        },
        format = {
          enable = true,
        },
        hint = {
          arrayIndex = "Auto",
          enable = true,
          paramName = "All",
          paramType = true,
          setType = true,
        },
        hover = {
          enable = true,
          enumsLimit = 5,
          previewFields = 20,
          viewNumber = true,
          viewString = true,
          viewStringMax = 1000,
        },
        misc = {
          parameters = { "self" },
        },
        runtime = {
          fileEncoding = "utf8",
          path = { "?.lua", "?/init.lua", "lua/?.lua", "lua/?/init.lua" },
          version = "LuaJIT",
        },
        semantic = {
          annotation = true,
          enable = true,
          keyword = true,
          variable = true,
        },
        telemetry = {
          enable = false,
        },
        window = {
          progressBar = true,
          statusBar = true,
        },
        workspace = {
          checkThirdParty = true,
          ignoreDir = { ".vscode" },
          ignoreSubmodules = true,
          maxPreload = 5000,
          preloadFileSize = 500,
          useGitIgnore = true,
        },
      },
    },
  },
})

-- vim:filetype=lua
